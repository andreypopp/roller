#!/usr/bin/env node
var fs            = require('fs'),
    path          = require('path'),
    Graph         = require('./graph').Graph,
    multibundler  = require('./multibundler/static'),
    unique        = require('lodash.uniq'),
    flatten       = require('lodash.flatten')

var argv  = require('optimist').argv,
    command = argv._[0],
    args = argv._.slice(1)


switch (command) {
  case 'graph':
    showGraph(args, argv)
    break
  case 'multibundle':
    multiBundle(args, argv)
    break
  default:
    error('unknown command')
}

function multiBundle(args, opts) {
  var spec = parseMultiBundleSpec(args),
      outputDir = path.resolve(opts.output || opts.o || './')


  var streams = multibundler(spec, {
    transform: asArray(opts.transform, opts.t),
    extensions: ['.js'].concat(asArray(opts.extension))
  })

  layoutMultiBundle(streams, outputDir)
}

function showGraph(args, opts) {
  var results = new Graph(args, {
    transform: asArray(opts.transform, opts.t),
    extensions: ['.js'].concat(asArray(opts.extension))
  })

  results.toPromise()
    .then(function(result) { console.log(JSON.stringify(result)) })
    .end()
}

function layoutMultiBundle(streams, directory) {
  for (var name in streams)
    for (var bundle in streams[name])
      streams[name][bundle]
        .pipe(fs.createWriteStream(path.join(directory, name) + '.' + bundle))
}

function parseMultiBundleSpec(args) {
  var spec = {}
  args.forEach(function(b) {
    if (b.indexOf(':') > -1) {
      b = b.split(':')
      spec[b[0]] = b[1]
    }
    else {
      spec[bundleName(b)] = b
    }
  })
  return spec
}

function bundleName(p) {
  return path.basename(p).replace(/\..*$/, '')
}

function asArray() {
  return unique(flatten(arguments))
}

function error(msg, code) {
  console.error('error:', msg)
  process.exit(code || 1)
}
